{"ast":null,"code":"// src/errors/ai-sdk-error.ts\nvar marker = \"vercel.ai.error\";\nvar symbol = Symbol.for(marker);\nvar _a;\nvar _AISDKError = class _AISDKError extends Error {\n  /**\n   * Creates an AI SDK Error.\n   *\n   * @param {Object} params - The parameters for creating the error.\n   * @param {string} params.name - The name of the error.\n   * @param {string} params.message - The error message.\n   * @param {unknown} [params.cause] - The underlying cause of the error.\n   */\n  constructor({\n    name: name14,\n    message,\n    cause\n  }) {\n    super(message);\n    this[_a] = true;\n    this.name = name14;\n    this.cause = cause;\n  }\n  /**\n   * Checks if the given error is an AI SDK Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is an AI SDK Error, false otherwise.\n   */\n  static isInstance(error) {\n    return _AISDKError.hasMarker(error, marker);\n  }\n  static hasMarker(error, marker15) {\n    const markerSymbol = Symbol.for(marker15);\n    return error != null && typeof error === \"object\" && markerSymbol in error && typeof error[markerSymbol] === \"boolean\" && error[markerSymbol] === true;\n  }\n};\n_a = symbol;\nvar AISDKError = _AISDKError;\n\n// src/errors/api-call-error.ts\nvar name = \"AI_APICallError\";\nvar marker2 = `vercel.ai.error.${name}`;\nvar symbol2 = Symbol.for(marker2);\nvar _a2;\nvar APICallError = class extends AISDKError {\n  constructor({\n    message,\n    url,\n    requestBodyValues,\n    statusCode,\n    responseHeaders,\n    responseBody,\n    cause,\n    isRetryable = statusCode != null && (statusCode === 408 ||\n    // request timeout\n    statusCode === 409 ||\n    // conflict\n    statusCode === 429 ||\n    // too many requests\n    statusCode >= 500),\n    // server error\n    data\n  }) {\n    super({\n      name,\n      message,\n      cause\n    });\n    this[_a2] = true;\n    this.url = url;\n    this.requestBodyValues = requestBodyValues;\n    this.statusCode = statusCode;\n    this.responseHeaders = responseHeaders;\n    this.responseBody = responseBody;\n    this.isRetryable = isRetryable;\n    this.data = data;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker2);\n  }\n};\n_a2 = symbol2;\n\n// src/errors/empty-response-body-error.ts\nvar name2 = \"AI_EmptyResponseBodyError\";\nvar marker3 = `vercel.ai.error.${name2}`;\nvar symbol3 = Symbol.for(marker3);\nvar _a3;\nvar EmptyResponseBodyError = class extends AISDKError {\n  // used in isInstance\n  constructor({\n    message = \"Empty response body\"\n  } = {}) {\n    super({\n      name: name2,\n      message\n    });\n    this[_a3] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker3);\n  }\n};\n_a3 = symbol3;\n\n// src/errors/get-error-message.ts\nfunction getErrorMessage(error) {\n  if (error == null) {\n    return \"unknown error\";\n  }\n  if (typeof error === \"string\") {\n    return error;\n  }\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return JSON.stringify(error);\n}\n\n// src/errors/invalid-argument-error.ts\nvar name3 = \"AI_InvalidArgumentError\";\nvar marker4 = `vercel.ai.error.${name3}`;\nvar symbol4 = Symbol.for(marker4);\nvar _a4;\nvar InvalidArgumentError = class extends AISDKError {\n  constructor({\n    message,\n    cause,\n    argument\n  }) {\n    super({\n      name: name3,\n      message,\n      cause\n    });\n    this[_a4] = true;\n    this.argument = argument;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker4);\n  }\n};\n_a4 = symbol4;\n\n// src/errors/invalid-prompt-error.ts\nvar name4 = \"AI_InvalidPromptError\";\nvar marker5 = `vercel.ai.error.${name4}`;\nvar symbol5 = Symbol.for(marker5);\nvar _a5;\nvar InvalidPromptError = class extends AISDKError {\n  constructor({\n    prompt,\n    message,\n    cause\n  }) {\n    super({\n      name: name4,\n      message: `Invalid prompt: ${message}`,\n      cause\n    });\n    this[_a5] = true;\n    this.prompt = prompt;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker5);\n  }\n};\n_a5 = symbol5;\n\n// src/errors/invalid-response-data-error.ts\nvar name5 = \"AI_InvalidResponseDataError\";\nvar marker6 = `vercel.ai.error.${name5}`;\nvar symbol6 = Symbol.for(marker6);\nvar _a6;\nvar InvalidResponseDataError = class extends AISDKError {\n  constructor({\n    data,\n    message = `Invalid response data: ${JSON.stringify(data)}.`\n  }) {\n    super({\n      name: name5,\n      message\n    });\n    this[_a6] = true;\n    this.data = data;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker6);\n  }\n};\n_a6 = symbol6;\n\n// src/errors/json-parse-error.ts\nvar name6 = \"AI_JSONParseError\";\nvar marker7 = `vercel.ai.error.${name6}`;\nvar symbol7 = Symbol.for(marker7);\nvar _a7;\nvar JSONParseError = class extends AISDKError {\n  constructor({\n    text,\n    cause\n  }) {\n    super({\n      name: name6,\n      message: `JSON parsing failed: Text: ${text}.\nError message: ${getErrorMessage(cause)}`,\n      cause\n    });\n    this[_a7] = true;\n    this.text = text;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker7);\n  }\n};\n_a7 = symbol7;\n\n// src/errors/load-api-key-error.ts\nvar name7 = \"AI_LoadAPIKeyError\";\nvar marker8 = `vercel.ai.error.${name7}`;\nvar symbol8 = Symbol.for(marker8);\nvar _a8;\nvar LoadAPIKeyError = class extends AISDKError {\n  // used in isInstance\n  constructor({\n    message\n  }) {\n    super({\n      name: name7,\n      message\n    });\n    this[_a8] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker8);\n  }\n};\n_a8 = symbol8;\n\n// src/errors/load-setting-error.ts\nvar name8 = \"AI_LoadSettingError\";\nvar marker9 = `vercel.ai.error.${name8}`;\nvar symbol9 = Symbol.for(marker9);\nvar _a9;\nvar LoadSettingError = class extends AISDKError {\n  // used in isInstance\n  constructor({\n    message\n  }) {\n    super({\n      name: name8,\n      message\n    });\n    this[_a9] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker9);\n  }\n};\n_a9 = symbol9;\n\n// src/errors/no-content-generated-error.ts\nvar name9 = \"AI_NoContentGeneratedError\";\nvar marker10 = `vercel.ai.error.${name9}`;\nvar symbol10 = Symbol.for(marker10);\nvar _a10;\nvar NoContentGeneratedError = class extends AISDKError {\n  // used in isInstance\n  constructor({\n    message = \"No content generated.\"\n  } = {}) {\n    super({\n      name: name9,\n      message\n    });\n    this[_a10] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker10);\n  }\n};\n_a10 = symbol10;\n\n// src/errors/no-such-model-error.ts\nvar name10 = \"AI_NoSuchModelError\";\nvar marker11 = `vercel.ai.error.${name10}`;\nvar symbol11 = Symbol.for(marker11);\nvar _a11;\nvar NoSuchModelError = class extends AISDKError {\n  constructor({\n    errorName = name10,\n    modelId,\n    modelType,\n    message = `No such ${modelType}: ${modelId}`\n  }) {\n    super({\n      name: errorName,\n      message\n    });\n    this[_a11] = true;\n    this.modelId = modelId;\n    this.modelType = modelType;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker11);\n  }\n};\n_a11 = symbol11;\n\n// src/errors/too-many-embedding-values-for-call-error.ts\nvar name11 = \"AI_TooManyEmbeddingValuesForCallError\";\nvar marker12 = `vercel.ai.error.${name11}`;\nvar symbol12 = Symbol.for(marker12);\nvar _a12;\nvar TooManyEmbeddingValuesForCallError = class extends AISDKError {\n  constructor(options) {\n    super({\n      name: name11,\n      message: `Too many values for a single embedding call. The ${options.provider} model \"${options.modelId}\" can only embed up to ${options.maxEmbeddingsPerCall} values per call, but ${options.values.length} values were provided.`\n    });\n    this[_a12] = true;\n    this.provider = options.provider;\n    this.modelId = options.modelId;\n    this.maxEmbeddingsPerCall = options.maxEmbeddingsPerCall;\n    this.values = options.values;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker12);\n  }\n};\n_a12 = symbol12;\n\n// src/errors/type-validation-error.ts\nvar name12 = \"AI_TypeValidationError\";\nvar marker13 = `vercel.ai.error.${name12}`;\nvar symbol13 = Symbol.for(marker13);\nvar _a13;\nvar _TypeValidationError = class _TypeValidationError extends AISDKError {\n  constructor({\n    value,\n    cause\n  }) {\n    super({\n      name: name12,\n      message: `Type validation failed: Value: ${JSON.stringify(value)}.\nError message: ${getErrorMessage(cause)}`,\n      cause\n    });\n    this[_a13] = true;\n    this.value = value;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker13);\n  }\n  /**\n   * Wraps an error into a TypeValidationError.\n   * If the cause is already a TypeValidationError with the same value, it returns the cause.\n   * Otherwise, it creates a new TypeValidationError.\n   *\n   * @param {Object} params - The parameters for wrapping the error.\n   * @param {unknown} params.value - The value that failed validation.\n   * @param {unknown} params.cause - The original error or cause of the validation failure.\n   * @returns {TypeValidationError} A TypeValidationError instance.\n   */\n  static wrap({\n    value,\n    cause\n  }) {\n    return _TypeValidationError.isInstance(cause) && cause.value === value ? cause : new _TypeValidationError({\n      value,\n      cause\n    });\n  }\n};\n_a13 = symbol13;\nvar TypeValidationError = _TypeValidationError;\n\n// src/errors/unsupported-functionality-error.ts\nvar name13 = \"AI_UnsupportedFunctionalityError\";\nvar marker14 = `vercel.ai.error.${name13}`;\nvar symbol14 = Symbol.for(marker14);\nvar _a14;\nvar UnsupportedFunctionalityError = class extends AISDKError {\n  constructor({\n    functionality,\n    message = `'${functionality}' functionality not supported.`\n  }) {\n    super({\n      name: name13,\n      message\n    });\n    this[_a14] = true;\n    this.functionality = functionality;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker14);\n  }\n};\n_a14 = symbol14;\n\n// src/json-value/is-json.ts\nfunction isJSONValue(value) {\n  if (value === null || typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n    return true;\n  }\n  if (Array.isArray(value)) {\n    return value.every(isJSONValue);\n  }\n  if (typeof value === \"object\") {\n    return Object.entries(value).every(([key, val]) => typeof key === \"string\" && isJSONValue(val));\n  }\n  return false;\n}\nfunction isJSONArray(value) {\n  return Array.isArray(value) && value.every(isJSONValue);\n}\nfunction isJSONObject(value) {\n  return value != null && typeof value === \"object\" && Object.entries(value).every(([key, val]) => typeof key === \"string\" && isJSONValue(val));\n}\nexport { AISDKError, APICallError, EmptyResponseBodyError, InvalidArgumentError, InvalidPromptError, InvalidResponseDataError, JSONParseError, LoadAPIKeyError, LoadSettingError, NoContentGeneratedError, NoSuchModelError, TooManyEmbeddingValuesForCallError, TypeValidationError, UnsupportedFunctionalityError, getErrorMessage, isJSONArray, isJSONObject, isJSONValue };","map":{"version":3,"names":["marker","symbol","Symbol","for","_a","_AISDKError","Error","constructor","name","name14","message","cause","isInstance","error","hasMarker","marker15","markerSymbol","AISDKError","marker2","symbol2","_a2","APICallError","url","requestBodyValues","statusCode","responseHeaders","responseBody","isRetryable","data","name2","marker3","symbol3","_a3","EmptyResponseBodyError","getErrorMessage","JSON","stringify","name3","marker4","symbol4","_a4","InvalidArgumentError","argument","name4","marker5","symbol5","_a5","InvalidPromptError","prompt","name5","marker6","symbol6","_a6","InvalidResponseDataError","name6","marker7","symbol7","_a7","JSONParseError","text","name7","marker8","symbol8","_a8","LoadAPIKeyError","name8","marker9","symbol9","_a9","LoadSettingError","name9","marker10","symbol10","_a10","NoContentGeneratedError","name10","marker11","symbol11","_a11","NoSuchModelError","errorName","modelId","modelType","name11","marker12","symbol12","_a12","TooManyEmbeddingValuesForCallError","options","provider","maxEmbeddingsPerCall","values","length","name12","marker13","symbol13","_a13","_TypeValidationError","value","wrap","TypeValidationError","name13","marker14","symbol14","_a14","UnsupportedFunctionalityError","functionality","isJSONValue","Array","isArray","every","Object","entries","key","val","isJSONArray","isJSONObject"],"sources":["C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\ai-sdk-error.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\api-call-error.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\empty-response-body-error.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\get-error-message.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\invalid-argument-error.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\invalid-prompt-error.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\invalid-response-data-error.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\json-parse-error.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\load-api-key-error.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\load-setting-error.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\no-content-generated-error.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\no-such-model-error.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\too-many-embedding-values-for-call-error.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\type-validation-error.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\errors\\unsupported-functionality-error.ts","C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\@ai-sdk\\provider\\src\\json-value\\is-json.ts"],"sourcesContent":["/**\n * Symbol used for identifying AI SDK Error instances.\n * Enables checking if an error is an instance of AISDKError across package versions.\n */\nconst marker = 'vercel.ai.error';\nconst symbol = Symbol.for(marker);\n\n/**\n * Custom error class for AI SDK related errors.\n * @extends Error\n */\nexport class AISDKError extends Error {\n  private readonly [symbol] = true; // used in isInstance\n\n  /**\n   * The underlying cause of the error, if any.\n   */\n  readonly cause?: unknown;\n\n  /**\n   * Creates an AI SDK Error.\n   *\n   * @param {Object} params - The parameters for creating the error.\n   * @param {string} params.name - The name of the error.\n   * @param {string} params.message - The error message.\n   * @param {unknown} [params.cause] - The underlying cause of the error.\n   */\n  constructor({\n    name,\n    message,\n    cause,\n  }: {\n    name: string;\n    message: string;\n    cause?: unknown;\n  }) {\n    super(message);\n\n    this.name = name;\n    this.cause = cause;\n  }\n\n  /**\n   * Checks if the given error is an AI SDK Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is an AI SDK Error, false otherwise.\n   */\n  static isInstance(error: unknown): error is AISDKError {\n    return AISDKError.hasMarker(error, marker);\n  }\n\n  protected static hasMarker(error: unknown, marker: string): boolean {\n    const markerSymbol = Symbol.for(marker);\n    return (\n      error != null &&\n      typeof error === 'object' &&\n      markerSymbol in error &&\n      typeof error[markerSymbol] === 'boolean' &&\n      error[markerSymbol] === true\n    );\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_APICallError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class APICallError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly url: string;\n  readonly requestBodyValues: unknown;\n  readonly statusCode?: number;\n\n  readonly responseHeaders?: Record<string, string>;\n  readonly responseBody?: string;\n\n  readonly isRetryable: boolean;\n  readonly data?: unknown;\n\n  constructor({\n    message,\n    url,\n    requestBodyValues,\n    statusCode,\n    responseHeaders,\n    responseBody,\n    cause,\n    isRetryable = statusCode != null &&\n      (statusCode === 408 || // request timeout\n        statusCode === 409 || // conflict\n        statusCode === 429 || // too many requests\n        statusCode >= 500), // server error\n    data,\n  }: {\n    message: string;\n    url: string;\n    requestBodyValues: unknown;\n    statusCode?: number;\n    responseHeaders?: Record<string, string>;\n    responseBody?: string;\n    cause?: unknown;\n    isRetryable?: boolean;\n    data?: unknown;\n  }) {\n    super({ name, message, cause });\n\n    this.url = url;\n    this.requestBodyValues = requestBodyValues;\n    this.statusCode = statusCode;\n    this.responseHeaders = responseHeaders;\n    this.responseBody = responseBody;\n    this.isRetryable = isRetryable;\n    this.data = data;\n  }\n\n  static isInstance(error: unknown): error is APICallError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_EmptyResponseBodyError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class EmptyResponseBodyError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  constructor({ message = 'Empty response body' }: { message?: string } = {}) {\n    super({ name, message });\n  }\n\n  static isInstance(error: unknown): error is EmptyResponseBodyError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","export function getErrorMessage(error: unknown | undefined) {\n  if (error == null) {\n    return 'unknown error';\n  }\n\n  if (typeof error === 'string') {\n    return error;\n  }\n\n  if (error instanceof Error) {\n    return error.message;\n  }\n\n  return JSON.stringify(error);\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_InvalidArgumentError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * A function argument is invalid.\n */\nexport class InvalidArgumentError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly argument: string;\n\n  constructor({\n    message,\n    cause,\n    argument,\n  }: {\n    argument: string;\n    message: string;\n    cause?: unknown;\n  }) {\n    super({ name, message, cause });\n\n    this.argument = argument;\n  }\n\n  static isInstance(error: unknown): error is InvalidArgumentError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_InvalidPromptError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * A prompt is invalid. This error should be thrown by providers when they cannot\n * process a prompt.\n */\nexport class InvalidPromptError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly prompt: unknown;\n\n  constructor({\n    prompt,\n    message,\n    cause,\n  }: {\n    prompt: unknown;\n    message: string;\n    cause?: unknown;\n  }) {\n    super({ name, message: `Invalid prompt: ${message}`, cause });\n\n    this.prompt = prompt;\n  }\n\n  static isInstance(error: unknown): error is InvalidPromptError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_InvalidResponseDataError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * Server returned a response with invalid data content.\n * This should be thrown by providers when they cannot parse the response from the API.\n */\nexport class InvalidResponseDataError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly data: unknown;\n\n  constructor({\n    data,\n    message = `Invalid response data: ${JSON.stringify(data)}.`,\n  }: {\n    data: unknown;\n    message?: string;\n  }) {\n    super({ name, message });\n\n    this.data = data;\n  }\n\n  static isInstance(error: unknown): error is InvalidResponseDataError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\nimport { getErrorMessage } from './get-error-message';\n\nconst name = 'AI_JSONParseError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class JSONParseError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly text: string;\n\n  constructor({ text, cause }: { text: string; cause: unknown }) {\n    super({\n      name,\n      message:\n        `JSON parsing failed: ` +\n        `Text: ${text}.\\n` +\n        `Error message: ${getErrorMessage(cause)}`,\n      cause,\n    });\n\n    this.text = text;\n  }\n\n  static isInstance(error: unknown): error is JSONParseError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_LoadAPIKeyError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class LoadAPIKeyError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  constructor({ message }: { message: string }) {\n    super({ name, message });\n  }\n\n  static isInstance(error: unknown): error is LoadAPIKeyError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_LoadSettingError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class LoadSettingError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  constructor({ message }: { message: string }) {\n    super({ name, message });\n  }\n\n  static isInstance(error: unknown): error is LoadSettingError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_NoContentGeneratedError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\nThrown when the AI provider fails to generate any content.\n */\nexport class NoContentGeneratedError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  constructor({\n    message = 'No content generated.',\n  }: { message?: string } = {}) {\n    super({ name, message });\n  }\n\n  static isInstance(error: unknown): error is NoContentGeneratedError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_NoSuchModelError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class NoSuchModelError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly modelId: string;\n  readonly modelType: 'languageModel' | 'textEmbeddingModel' | 'imageModel';\n\n  constructor({\n    errorName = name,\n    modelId,\n    modelType,\n    message = `No such ${modelType}: ${modelId}`,\n  }: {\n    errorName?: string;\n    modelId: string;\n    modelType: 'languageModel' | 'textEmbeddingModel' | 'imageModel';\n    message?: string;\n  }) {\n    super({ name: errorName, message });\n\n    this.modelId = modelId;\n    this.modelType = modelType;\n  }\n\n  static isInstance(error: unknown): error is NoSuchModelError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_TooManyEmbeddingValuesForCallError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class TooManyEmbeddingValuesForCallError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly provider: string;\n  readonly modelId: string;\n  readonly maxEmbeddingsPerCall: number;\n  readonly values: Array<unknown>;\n\n  constructor(options: {\n    provider: string;\n    modelId: string;\n    maxEmbeddingsPerCall: number;\n    values: Array<unknown>;\n  }) {\n    super({\n      name,\n      message:\n        `Too many values for a single embedding call. ` +\n        `The ${options.provider} model \"${options.modelId}\" can only embed up to ` +\n        `${options.maxEmbeddingsPerCall} values per call, but ${options.values.length} values were provided.`,\n    });\n\n    this.provider = options.provider;\n    this.modelId = options.modelId;\n    this.maxEmbeddingsPerCall = options.maxEmbeddingsPerCall;\n    this.values = options.values;\n  }\n\n  static isInstance(\n    error: unknown,\n  ): error is TooManyEmbeddingValuesForCallError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\nimport { getErrorMessage } from './get-error-message';\n\nconst name = 'AI_TypeValidationError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class TypeValidationError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly value: unknown;\n\n  constructor({ value, cause }: { value: unknown; cause: unknown }) {\n    super({\n      name,\n      message:\n        `Type validation failed: ` +\n        `Value: ${JSON.stringify(value)}.\\n` +\n        `Error message: ${getErrorMessage(cause)}`,\n      cause,\n    });\n\n    this.value = value;\n  }\n\n  static isInstance(error: unknown): error is TypeValidationError {\n    return AISDKError.hasMarker(error, marker);\n  }\n\n  /**\n   * Wraps an error into a TypeValidationError.\n   * If the cause is already a TypeValidationError with the same value, it returns the cause.\n   * Otherwise, it creates a new TypeValidationError.\n   *\n   * @param {Object} params - The parameters for wrapping the error.\n   * @param {unknown} params.value - The value that failed validation.\n   * @param {unknown} params.cause - The original error or cause of the validation failure.\n   * @returns {TypeValidationError} A TypeValidationError instance.\n   */\n  static wrap({\n    value,\n    cause,\n  }: {\n    value: unknown;\n    cause: unknown;\n  }): TypeValidationError {\n    return TypeValidationError.isInstance(cause) && cause.value === value\n      ? cause\n      : new TypeValidationError({ value, cause });\n  }\n}\n","import { AISDKError } from './ai-sdk-error';\n\nconst name = 'AI_UnsupportedFunctionalityError';\nconst marker = `vercel.ai.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport class UnsupportedFunctionalityError extends AISDKError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly functionality: string;\n\n  constructor({\n    functionality,\n    message = `'${functionality}' functionality not supported.`,\n  }: {\n    functionality: string;\n    message?: string;\n  }) {\n    super({ name, message });\n    this.functionality = functionality;\n  }\n\n  static isInstance(error: unknown): error is UnsupportedFunctionalityError {\n    return AISDKError.hasMarker(error, marker);\n  }\n}\n","import { JSONArray, JSONObject, JSONValue } from './json-value';\n\nexport function isJSONValue(value: unknown): value is JSONValue {\n  if (\n    value === null ||\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean'\n  ) {\n    return true;\n  }\n\n  if (Array.isArray(value)) {\n    return value.every(isJSONValue);\n  }\n\n  if (typeof value === 'object') {\n    return Object.entries(value).every(\n      ([key, val]) => typeof key === 'string' && isJSONValue(val),\n    );\n  }\n\n  return false;\n}\n\nexport function isJSONArray(value: unknown): value is JSONArray {\n  return Array.isArray(value) && value.every(isJSONValue);\n}\n\nexport function isJSONObject(value: unknown): value is JSONObject {\n  return (\n    value != null &&\n    typeof value === 'object' &&\n    Object.entries(value).every(\n      ([key, val]) => typeof key === 'string' && isJSONValue(val),\n    )\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
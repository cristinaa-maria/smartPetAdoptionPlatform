{"ast":null,"code":"import { createParser } from \"./index.js\";\nimport { ParseError } from \"./index.js\";\nclass EventSourceParserStream extends TransformStream {\n  constructor({\n    onError,\n    onRetry,\n    onComment\n  } = {}) {\n    let parser;\n    super({\n      start(controller) {\n        parser = createParser({\n          onEvent: event => {\n            controller.enqueue(event);\n          },\n          onError(error) {\n            onError === \"terminate\" ? controller.error(error) : typeof onError == \"function\" && onError(error);\n          },\n          onRetry,\n          onComment\n        });\n      },\n      transform(chunk) {\n        parser.feed(chunk);\n      }\n    });\n  }\n}\nexport { EventSourceParserStream, ParseError };","map":{"version":3,"names":["EventSourceParserStream","TransformStream","constructor","onError","onRetry","onComment","parser","start","controller","createParser","onEvent","event","enqueue","error","transform","chunk","feed"],"sources":["C:\\Users\\Cristina Aghei\\facultate\\licenta\\parteaPractica\\animals-shelter-app\\node_modules\\eventsource-parser\\src\\stream.ts"],"sourcesContent":["import {createParser} from './parse.ts'\nimport type {EventSourceMessage, EventSourceParser} from './types.ts'\n\n/**\n * Options for the EventSourceParserStream.\n *\n * @public\n */\nexport interface StreamOptions {\n  /**\n   * Behavior when a parsing error occurs.\n   *\n   * - A custom function can be provided to handle the error.\n   * - `'terminate'` will error the stream and stop parsing.\n   * - Any other value will ignore the error and continue parsing.\n   *\n   * @defaultValue `undefined`\n   */\n  onError?: 'terminate' | ((error: Error) => void)\n\n  /**\n   * Callback for when a reconnection interval is sent from the server.\n   *\n   * @param retry - The number of milliseconds to wait before reconnecting.\n   */\n  onRetry?: (retry: number) => void\n\n  /**\n   * Callback for when a comment is encountered in the stream.\n   *\n   * @param comment - The comment encountered in the stream.\n   */\n  onComment?: (comment: string) => void\n}\n\n/**\n * A TransformStream that ingests a stream of strings and produces a stream of `EventSourceMessage`.\n *\n * @example Basic usage\n * ```\n * const eventStream =\n *   response.body\n *     .pipeThrough(new TextDecoderStream())\n *     .pipeThrough(new EventSourceParserStream())\n * ```\n *\n * @example Terminate stream on parsing errors\n * ```\n * const eventStream =\n *  response.body\n *   .pipeThrough(new TextDecoderStream())\n *   .pipeThrough(new EventSourceParserStream({terminateOnError: true}))\n * ```\n *\n * @public\n */\nexport class EventSourceParserStream extends TransformStream<string, EventSourceMessage> {\n  constructor({onError, onRetry, onComment}: StreamOptions = {}) {\n    let parser!: EventSourceParser\n\n    super({\n      start(controller) {\n        parser = createParser({\n          onEvent: (event) => {\n            controller.enqueue(event)\n          },\n          onError(error) {\n            if (onError === 'terminate') {\n              controller.error(error)\n            } else if (typeof onError === 'function') {\n              onError(error)\n            }\n\n            // Ignore by default\n          },\n          onRetry,\n          onComment,\n        })\n      },\n      transform(chunk) {\n        parser.feed(chunk)\n      },\n    })\n  }\n}\n\nexport {type ErrorType, ParseError} from './errors.ts'\nexport type {EventSourceMessage} from './types.ts'\n"],"mappings":";;AAwDO,MAAMA,uBAAA,SAAgCC,eAAA,CAA4C;EACvFC,YAAY;IAACC,OAAA;IAASC,OAAA;IAASC;EAAS,IAAmB,IAAI;IACzD,IAAAC,MAAA;IAEE;MACJC,MAAMC,UAAA,EAAY;QAChBF,MAAA,GAASG,YAAA,CAAa;UACpBC,OAAA,EAAUC,KAAA,IAAU;YAClBH,UAAA,CAAWI,OAAA,CAAQD,KAAK;UAC1B;UACAR,QAAQU,KAAA,EAAO;YACTV,OAAA,KAAY,cACdK,UAAA,CAAWK,KAAA,CAAMA,KAAK,IACb,OAAOV,OAAA,IAAY,cAC5BA,OAAA,CAAQU,KAAK;UAIjB;UACAT,OAAA;UACAC;QAAA,CACD;MACH;MACAS,UAAUC,KAAA,EAAO;QACfT,MAAA,CAAOU,IAAA,CAAKD,KAAK;MACnB;IAAA,CACD;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// Update the fetchUserSession function\nlet setLoading;\nlet setUserId;\nlet setError;\nlet userId;\nlet newAnimal;\nlet location;\nlet contact;\nlet userType;\nlet fetchAnimals;\nlet setNewAnimal;\nlet setLocation;\nlet setIsEditing;\nlet setEditingId;\nconst fetchUserSession = async () => {\n  try {\n    setLoading(true);\n    // Update this URL to match your backend session endpoint\n    const response = await fetch(\"http://localhost:8083/api/user/current\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      if (response.status === 401) {\n        // Redirect to login if unauthorized\n        window.location.href = \"/login\";\n        return;\n      }\n      throw new Error(\"Failed to fetch user session\");\n    }\n    const data = await response.json();\n    if (data && data.id) {\n      setUserId(data.id);\n    } else {\n      throw new Error(\"Invalid user data received\");\n    }\n  } catch (err) {\n    console.error(\"Error fetching user session:\", err);\n    setError(\"Nu sunteți conectat. Vă rugăm să vă autentificați.\");\n  } finally {\n    setLoading(false);\n  }\n};\n\n// Update the addAnimal function to include userId\nconst addAnimal = async () => {\n  if (!userId) {\n    setError(\"Vă rugăm să vă autentificați pentru a adăuga un anunț.\");\n    return;\n  }\n  if (newAnimal.name && newAnimal.species) {\n    try {\n      setLoading(true);\n      const animalDTO = {\n        name: newAnimal.name,\n        species: newAnimal.species,\n        description: newAnimal.description,\n        imageUrl: newAnimal.imageUrl || `/placeholder.svg?height=200&width=200`,\n        place: newAnimal.place,\n        userId: userId // Explicitly include the userId\n      };\n\n      // Create URL with query parameters for the additional fields\n      const url = new URL(\"http://localhost:8083/createAnimal\");\n      url.searchParams.append(\"location\", location);\n      url.searchParams.append(\"contact\", contact);\n      url.searchParams.append(\"type\", userType);\n      url.searchParams.append(\"userId\", userId.toString()); // Add userId as query parameter\n\n      const response = await fetch(url.toString(), {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(animalDTO),\n        credentials: \"include\"\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          window.location.href = \"/login\";\n          return;\n        }\n        throw new Error(\"Failed to create animal\");\n      }\n      await fetchAnimals();\n\n      // Reset form\n      setNewAnimal({\n        name: \"\",\n        species: \"\",\n        description: \"\",\n        imageUrl: \"\",\n        place: \"\",\n        imageFile: null\n      });\n      setLocation(\"\");\n      setContact(\"\");\n      setIsEditing(false);\n      setEditingId(null);\n    } catch (err) {\n      console.error(\"Error adding/updating animal:\", err);\n      setError(\"Failed to save animal. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  }\n};","map":{"version":3,"names":["setLoading","setUserId","setError","userId","newAnimal","location","contact","userType","fetchAnimals","setNewAnimal","setLocation","setIsEditing","setEditingId","fetchUserSession","response","fetch","method","credentials","headers","ok","status","window","href","Error","data","json","id","err","console","error","addAnimal","name","species","animalDTO","description","imageUrl","place","url","URL","searchParams","append","toString","body","JSON","stringify","imageFile","setContact"],"sources":["C:/Users/Cristina Aghei/facultate/licenta/animals-shelter-app/src/components/editor_catalog.js"],"sourcesContent":["// Update the fetchUserSession function\r\nlet setLoading: any\r\nlet setUserId: any\r\nlet setError: any\r\nlet userId: any\r\nlet newAnimal: any\r\nlet location: any\r\nlet contact: any\r\nlet userType: any\r\nlet fetchAnimals: any\r\nlet setNewAnimal: any\r\nlet setLocation: any\r\nlet setIsEditing: any\r\nlet setEditingId: any\r\n\r\nconst fetchUserSession = async () => {\r\n    try {\r\n        setLoading(true)\r\n        // Update this URL to match your backend session endpoint\r\n        const response = await fetch(\"http://localhost:8083/api/user/current\", {\r\n            method: \"GET\",\r\n            credentials: \"include\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        })\r\n\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // Redirect to login if unauthorized\r\n                window.location.href = \"/login\"\r\n                return\r\n            }\r\n            throw new Error(\"Failed to fetch user session\")\r\n        }\r\n\r\n        const data = await response.json()\r\n        if (data && data.id) {\r\n            setUserId(data.id)\r\n        } else {\r\n            throw new Error(\"Invalid user data received\")\r\n        }\r\n    } catch (err) {\r\n        console.error(\"Error fetching user session:\", err)\r\n        setError(\"Nu sunteți conectat. Vă rugăm să vă autentificați.\")\r\n    } finally {\r\n        setLoading(false)\r\n    }\r\n}\r\n\r\n// Update the addAnimal function to include userId\r\nconst addAnimal = async () => {\r\n    if (!userId) {\r\n        setError(\"Vă rugăm să vă autentificați pentru a adăuga un anunț.\")\r\n        return\r\n    }\r\n\r\n    if (newAnimal.name && newAnimal.species) {\r\n        try {\r\n            setLoading(true)\r\n\r\n            const animalDTO = {\r\n                name: newAnimal.name,\r\n                species: newAnimal.species,\r\n                description: newAnimal.description,\r\n                imageUrl: newAnimal.imageUrl || `/placeholder.svg?height=200&width=200`,\r\n                place: newAnimal.place,\r\n                userId: userId, // Explicitly include the userId\r\n            }\r\n\r\n            // Create URL with query parameters for the additional fields\r\n            const url = new URL(\"http://localhost:8083/createAnimal\")\r\n            url.searchParams.append(\"location\", location)\r\n            url.searchParams.append(\"contact\", contact)\r\n            url.searchParams.append(\"type\", userType)\r\n            url.searchParams.append(\"userId\", userId.toString()) // Add userId as query parameter\r\n\r\n            const response = await fetch(url.toString(), {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(animalDTO),\r\n                credentials: \"include\",\r\n            })\r\n\r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    window.location.href = \"/login\"\r\n                    return\r\n                }\r\n                throw new Error(\"Failed to create animal\")\r\n            }\r\n\r\n            await fetchAnimals()\r\n\r\n            // Reset form\r\n            setNewAnimal({\r\n                name: \"\",\r\n                species: \"\",\r\n                description: \"\",\r\n                imageUrl: \"\",\r\n                place: \"\",\r\n                imageFile: null,\r\n            })\r\n            setLocation(\"\")\r\n            setContact(\"\")\r\n            setIsEditing(false)\r\n            setEditingId(null)\r\n        } catch (err) {\r\n            console.error(\"Error adding/updating animal:\", err)\r\n            setError(\"Failed to save animal. Please try again.\")\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}